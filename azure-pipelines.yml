# Trigger a build when there is a push to the main branch or a tag starts with release-
trigger:
  branches:
    include:
    - main
  tags:
    include:
    - release-*

# Trigger a build when there is a pull request to the main branch
# Ignore PRs that are just updating the docs
pr:
  branches:
    include:
    - main
    exclude:
    - doc/*
    - README.rst

parameters:
  - name: includeReleaseCandidates
    displayName: "Allow pre-release dependencies"
    type: boolean
    default: false

variables:
  triggeredByPullRequest: $[eq(variables['Build.Reason'], 'PullRequest')]

stages:
  - stage: RunAllTests
    displayName: Run test suite
    jobs:
      - job: run_platform_tests
        strategy:
          matrix:
            mac_py310:
              imageName: 'macOS-latest'
              python.version: '3.10'
            linux_py310:
              imageName: 'ubuntu-latest'
              python.version: '3.10'
            windows_py310:
              imageName: 'windows-latest'
              python.version: '3.10'
            mac_py311:
              imageName: 'macOS-latest'
              python.version: '3.11'
            linux_py311:
              imageName: 'ubuntu-latest'
              python.version: '3.11'
            windows_py311:
              imageName: 'windows-latest'
              python.version: '3.11'
            mac_py312:
              imageName: 'macOS-latest'
              python.version: '3.12'
            linux_py312:
              imageName: 'ubuntu-latest'
              python.version: '3.12'
            windows_py312:
              imageName: 'windows-latest'
              python.version: '3.12'
        pool:
          vmImage: $(imageName)

        steps:
        # Install Miniconda on Linux/macOS
        - bash: |
            if [[ "$AGENT_OS" == "Darwin" ]]; then
              wget https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -O miniconda.sh
            else
              wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh
            fi
            bash miniconda.sh -b -p $HOME/miniconda
            echo "##vso[task.prependpath]$HOME/miniconda/bin"
            echo "##vso[task.setvariable variable=CONDA]$HOME/miniconda"
          condition: ne(variables['Agent.OS'], 'Windows_NT')
          displayName: 'Install Miniconda (Linux/macOS)'

        # Install Miniconda on Windows
        - powershell: |
            Invoke-WebRequest -Uri https://repo.anaconda.com/miniconda/Miniconda3-latest-Windows-x86_64.exe -OutFile miniconda.exe
            Start-Process -FilePath .\miniconda.exe -ArgumentList "/S", "/D=C:\Miniconda" -Wait
            echo "##vso[task.prependpath]C:\Miniconda"
            echo "##vso[task.prependpath]C:\Miniconda\Scripts"
            echo "##vso[task.setvariable variable=CONDA]C:\Miniconda"
          condition: eq(variables['Agent.OS'], 'Windows_NT')
          displayName: 'Install Miniconda (Windows)'

        # Update conda
        - script: |
            conda config --set always_yes yes --set changeps1 no
            conda update -q conda
            conda info -a
          displayName: 'Configure conda'

        # Create and activate conda environment
        - script: |
            conda create -n test-env python=$(python.version) -c conda-forge
          displayName: 'Create conda environment'

        # Install packages - simplified approach
        - bash: |
            source $CONDA/etc/profile.d/conda.sh
            conda activate test-env
            
            # Install core scientific packages via conda-forge
            conda install -c conda-forge \
              pytorch>=2.3 \
              numpy>=2.0 \
              pandas>=1.0 \
              scipy \
              scikit-learn>=1.6 \
              numba>=0.56 \
              -y
            
            # Install all other packages via pip
            python -m pip install --upgrade pip
            pip install transformers>=4.35 sentence-transformers>=2.2 tokenizers
            pip install datasets vectorizers fast_hdbscan>=0.2.2 
            pip install dataclasses tqdm tenacity aiohttp
            
            # Install test requirements
            pip install black isort pylint pytest umap-learn
            pip install anthropic cohere openai azure-ai-inference 
            pip install llama-cpp-python mistralai pytest-asyncio bm25s evoc
            
            # Install package and test tools
            pip install -e .
            pip install pytest-azurepipelines pytest-cov coveralls
          condition: ne(variables['Agent.OS'], 'Windows_NT')
          displayName: 'Install packages (Linux/macOS)'

        - script: |
            call C:\Miniconda\Scripts\activate.bat test-env
            
            REM Install core scientific packages via conda-forge
            conda install -c conda-forge pytorch>=2.3 numpy>=2.0 pandas>=1.0 scipy scikit-learn>=1.6 numba>=0.56 -y
            
            REM Install all other packages via pip
            python -m pip install --upgrade pip
            pip install transformers>=4.35 sentence-transformers>=2.2 tokenizers
            pip install datasets vectorizers fast_hdbscan>=0.2.2 
            pip install dataclasses tqdm tenacity aiohttp
            
            REM Install test requirements
            pip install black isort pylint pytest umap-learn
            pip install anthropic cohere openai azure-ai-inference 
            pip install llama-cpp-python mistralai pytest-asyncio bm25s evoc
            
            REM Install package and test tools
            pip install -e .
            pip install pytest-azurepipelines pytest-cov coveralls
          condition: eq(variables['Agent.OS'], 'Windows_NT')
          displayName: 'Install packages (Windows)'

        # Verify installations
        - bash: |
            source $CONDA/etc/profile.d/conda.sh
            conda activate test-env
            python -c "import torch; print(f'PyTorch: {torch.__version__}')"
            python -c "import numpy; print(f'NumPy: {numpy.__version__}')"
            python -c "import transformers; print(f'Transformers: {transformers.__version__}')"
            python -c "import sentence_transformers; print(f'Sentence Transformers: {sentence_transformers.__version__}')"
          condition: ne(variables['Agent.OS'], 'Windows_NT')
          displayName: 'Verify packages (Linux/macOS)'

        - script: |
            call C:\Miniconda\Scripts\activate.bat test-env
            python -c "import torch; print('PyTorch: ' + torch.__version__)"
            python -c "import numpy; print('NumPy: ' + numpy.__version__)"
            python -c "import transformers; print('Transformers: ' + transformers.__version__)"
            python -c "import sentence_transformers; print('Sentence Transformers: ' + sentence_transformers.__version__)"
          condition: eq(variables['Agent.OS'], 'Windows_NT')
          displayName: 'Verify packages (Windows)'

        # Run tests
        - bash: |
            source $CONDA/etc/profile.d/conda.sh
            conda activate test-env
            pytest toponymy/tests --show-capture=no -v --disable-warnings --junitxml=junit/test-results.xml --cov=toponymy/ --cov-report=xml --cov-report=html
          condition: ne(variables['Agent.OS'], 'Windows_NT')
          displayName: 'Run tests (Linux/macOS)'

        - script: |
            call C:\Miniconda\Scripts\activate.bat test-env
            pytest toponymy/tests --show-capture=no -v --disable-warnings --junitxml=junit/test-results.xml --cov=toponymy/ --cov-report=xml --cov-report=html
          condition: eq(variables['Agent.OS'], 'Windows_NT')
          displayName: 'Run tests (Windows)'

        - bash: |
            source $CONDA/etc/profile.d/conda.sh
            conda activate test-env
            coveralls
          displayName: 'Publish to coveralls'
          condition: and(succeeded(), eq(variables.triggeredByPullRequest, false), ne(variables['Agent.OS'], 'Windows_NT'))
          env:
            COVERALLS_REPO_TOKEN: $(COVERALLS_TOKEN)

        - task: PublishTestResults@2
          inputs:
            testResultsFiles: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
            testRunTitle: '$(Agent.OS) - $(Build.BuildNumber)[$(Agent.JobName)] - Python $(python.version)'
          condition: succeededOrFailed()

  - stage: BuildPublishArtifact
    dependsOn: RunAllTests
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/release-'), eq(variables.triggeredByPullRequest, false))
    jobs:
      - job: BuildArtifacts
        displayName: Build source dists and wheels    
        pool:
          vmImage: 'ubuntu-latest'
        steps:
        - task: UsePythonVersion@0
          inputs:
            versionSpec: '3.10'
          displayName: 'Use Python 3.10'

        - script: |
            python -m pip install --upgrade pip
            pip install wheel
            pip install -r requirements.txt
          displayName: 'Install dependencies'

        - script: |
            pip install -e .
          displayName: 'Install package locally'
        
        - script: |
            python setup.py sdist bdist_wheel
          displayName: 'Build package'

        - bash: |
            export PACKAGE_VERSION="$(python setup.py --version)"
            echo "Package Version: ${PACKAGE_VERSION}"
            echo "##vso[task.setvariable variable=packageVersionFormatted;]release-${PACKAGE_VERSION}"
          displayName: 'Get package version'

        - script: |
            echo "Version in git tag $(Build.SourceBranchName) does not match version derived from setup.py $(packageVersionFormatted)"
            exit 1
          displayName: Raise error if version doesnt match tag
          condition: and(succeeded(), ne(variables['Build.SourceBranchName'], variables['packageVersionFormatted']))

        - task: DownloadSecureFile@1
          name: PYPIRC_CONFIG
          displayName: 'Download pypirc'
          inputs:
            secureFile: 'pypirc'  

        - script: |
            pip install twine
            twine upload --repository pypi --config-file $(PYPIRC_CONFIG.secureFilePath) dist/* 
          displayName: 'Upload to PyPI'
          condition: and(succeeded(), eq(variables['Build.SourceBranchName'], variables['packageVersionFormatted']))