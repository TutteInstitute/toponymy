# Trigger a build when there is a push to the main branch or a tag starts with release-
#
# Ollama Integration Testing:
# To enable Ollama integration tests, create a pipeline variable named 'INSTALL_OLLAMA' 
# and set its value to 'true'. This will:
#   1. Install Ollama on Linux agents
#   2. Download a small model (qwen2.5:0.5b preferred, ~400MB)  
#   3. Run real LLM integration tests instead of mocks
#   4. Add ~2-5 minutes to build time
# If INSTALL_OLLAMA is not set or is 'false', tests use mock-based coverage.
#
trigger:
  branches:
    include:
    - main
  tags:
    include:
    - release-*

# Trigger a build when there is a pull request to the main branch
# Ignore PRs that are just updating the docs
pr:
  branches:
    include:
    - main
    exclude:
    - doc/*
    - README.rst

parameters:
  - name: includeReleaseCandidates
    displayName: "Allow pre-release dependencies"
    type: boolean
    default: false

variables:
  triggeredByPullRequest: $[eq(variables['Build.Reason'], 'PullRequest')]
  # Ollama Integration Testing Configuration:
  # Set INSTALL_OLLAMA to 'true' to enable Ollama integration tests in CI.
  # If not set or 'false', tests will use mock-based testing for LLM wrappers.
  # Ollama setup includes:
  #   - Installation of Ollama service (Linux only)
  #   - Download of smallest available model (qwen2.5:0.5b preferred)
  #   - Fallback to mock tests if installation/download fails
  # Note: This adds ~2-5 minutes to build time and requires ~1-2GB disk space
  # INSTALL_OLLAMA: 'true'  # Uncomment and set as pipeline variable to enable

stages:
  - stage: RunAllTests
    displayName: Run test suite
    jobs:
      - job: run_platform_tests
        strategy:
          matrix:
            # mac_py310:
            #   imageName: 'macOS-latest'
            #   python.version: '3.10'
            linux_py310:
              imageName: 'ubuntu-latest'
              python.version: '3.10'
            # windows_py310:
            #   imageName: 'windows-latest'
            #   python.version: '3.10'
            # mac_py311:
            #   imageName: 'macOS-latest'
            #   python.version: '3.11'
            linux_py311:
              imageName: 'ubuntu-latest'
              python.version: '3.11'
            # windows_py311:
            #   imageName: 'windows-latest'
            #   python.version: '3.11'
            # mac_py312:
            #   imageName: 'macOS-latest'
            #   python.version: '3.12'
            linux_py312:
              imageName: 'ubuntu-latest'
              python.version: '3.12'
            # windows_py312:
            #   imageName: 'windows-latest'
            #   python.version: '3.12'
            # linux_py313:
            #   imageName: 'ubuntu-latest'
            #   python.version: '3.13'
            # windows_py313:
            #   imageName: 'windows-latest'
            #   python.version: '3.13'
            # mac_py313:
            #   imageName: 'macOS-latest'
            #   python.version: '3.13'
        pool:
          vmImage: $(imageName)

        steps:
        - task: UsePythonVersion@0
          inputs:
            versionSpec: '$(python.version)'
          displayName: 'Use Python $(python.version)'

        - script: |
            python -m pip install --upgrade pip
          displayName: 'Upgrade pip'

        - script: |
            pip install -r requirements.txt
            pip install -r tests-requirements.txt
          displayName: 'Install dependencies'
          condition: ${{ eq(parameters.includeReleaseCandidates, false) }}

        - script: |
            pip install --pre -r requirements.txt
            pip install --pre -r tests-requirements.txt
          displayName: 'Install dependencies (allow pre-releases)'
          condition: ${{ eq(parameters.includeReleaseCandidates, true) }}

        - script: |
            pip install -e .
            pip install pytest  pytest-azurepipelines
            pip install pytest-cov
            pip install coveralls
          displayName: 'Install package'

        - script: |
            # Optional Ollama setup for integration tests (Linux only)
            # This is optional - tests will fall back to mocks if Ollama is not available
            # Set INSTALL_OLLAMA pipeline variable to 'true' to enable Ollama integration tests
            if [ "$AGENT_OS" = "Linux" ] && [ "${INSTALL_OLLAMA:-false}" = "true" ]; then
              echo "=== Installing Ollama for integration tests ==="
              echo "System info:"
              free -h || echo "free command not available"
              df -h / || echo "df command not available"
              echo "Installing Ollama..."
              
              # Install Ollama with error handling
              if curl -fsSL https://ollama.ai/install.sh | sh; then
                echo "Ollama installed successfully"
              else
                echo "Ollama installation failed, will use mock tests"
                exit 0
              fi
              
              # Check if Ollama is available
              if command -v ollama >/dev/null 2>&1; then
                echo "Starting Ollama service in background..."
                nohup ollama serve > ollama.log 2>&1 &
                OLLAMA_PID=$!
                echo "Ollama PID: $OLLAMA_PID"
                
                # Wait for service to start with timeout
                echo "Waiting for Ollama service to be ready..."
                for i in {1..30}; do
                  if ollama list >/dev/null 2>&1; then
                    echo "Ollama service is ready"
                    break
                  fi
                  sleep 1
                done
                
                # Check if service is actually running
                if ! ollama list >/dev/null 2>&1; then
                  echo "Ollama service failed to start properly, will use mock tests"
                  exit 0
                fi
                
                # Try to pull the smallest available model with timeout and fallbacks
                echo "Attempting to pull a small model for testing..."
                echo "Available models to try (in priority order): qwen2.5:0.5b, qwen2:0.5b, tinydolphin:1.1b"
                
                # Set up timeout and try multiple small models
                MODEL_PULLED=false
                for model in "qwen2.5:0.5b" "qwen2:0.5b" "tinydolphin:1.1b" "gemma2:2b"; do
                  echo "Trying to pull model: $model"
                  if timeout 300 ollama pull "$model"; then
                    echo "Successfully pulled model: $model"
                    MODEL_PULLED=true
                    break
                  else
                    echo "Failed to pull model: $model (timeout or error)"
                  fi
                done
                
                if [ "$MODEL_PULLED" = "false" ]; then
                  echo "Could not pull any test model, will use mock tests"
                else
                  echo "Model pull successful! Available models:"
                  ollama list || true
                  echo "Ollama setup complete - integration tests can run"
                fi
              else
                echo "Ollama command not found after installation, will use mock tests"
              fi
            else
              echo "=== Skipping Ollama installation ==="
              echo "Reason: INSTALL_OLLAMA not set to 'true' or not on Linux"
              echo "Tests will use mock-based LLM wrapper coverage"
              echo "To enable Ollama integration tests, set pipeline variable INSTALL_OLLAMA=true"
            fi
          displayName: 'Setup Ollama (optional for integration tests)'
          condition: eq(variables['Agent.OS'], 'Linux')
          continueOnError: true  # Never fail the build if Ollama setup fails
          env:
            INSTALL_OLLAMA: $(INSTALL_OLLAMA)  # Set this pipeline variable to enable Ollama

        - script: |
            pytest toponymy/tests --show-capture=no -v --disable-warnings --junitxml=junit/test-results.xml --cov=toponymy/ --cov-report=xml --cov-report=html
          displayName: 'Run tests'
          env:
            # Set CI environment variable to help tests understand they're running in CI
            CI: 'true'
            AZURE_PIPELINES: 'true'
            INSTALL_OLLAMA: $(INSTALL_OLLAMA)

        - script: |
            # Clean up Ollama processes if they were started
            if [ "${INSTALL_OLLAMA:-false}" = "true" ]; then
              echo "Cleaning up Ollama processes..."
              pkill -f "ollama serve" || echo "No Ollama processes to clean up"
              echo "Ollama cleanup complete"
            fi
          displayName: 'Cleanup Ollama processes'
          condition: and(always(), eq(variables['Agent.OS'], 'Linux'))
          continueOnError: true


        - bash: |
            coveralls
          displayName: 'Publish to coveralls'
          condition: and(succeeded(), eq(variables.triggeredByPullRequest, false)) # Don't run this for PRs because they can't access pipeline secrets
          env:
            COVERALLS_REPO_TOKEN: $(COVERALLS_TOKEN)

        - task: PublishTestResults@2
          inputs:
            testResultsFiles: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
            testRunTitle: '$(Agent.OS) - $(Build.BuildNumber)[$(Agent.JobName)] - Python $(python.version)'
          condition: succeededOrFailed()

  - stage: BuildPublishArtifact
    dependsOn: RunAllTests
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/release-'), eq(variables.triggeredByPullRequest, false))
    jobs:
      - job: BuildArtifacts
        displayName: Build source dists and wheels    
        pool:
          vmImage: 'ubuntu-latest'
        steps:
        - task: UsePythonVersion@0
          inputs:
            versionSpec: '3.10'
          displayName: 'Use Python 3.10'

        - script: |
            python -m pip install --upgrade pip
            pip install wheel
            pip install -r requirements.txt
          displayName: 'Install dependencies'

        - script: |
            pip install -e .
          displayName: 'Install package locally'
        
        - script: |
            python setup.py sdist bdist_wheel
          displayName: 'Build package'

        - bash: |
            export PACKAGE_VERSION="$(python setup.py --version)"
            echo "Package Version: ${PACKAGE_VERSION}"
            echo "##vso[task.setvariable variable=packageVersionFormatted;]release-${PACKAGE_VERSION}"
          displayName: 'Get package version'

        - script: |
            echo "Version in git tag $(Build.SourceBranchName) does not match version derived from setup.py $(packageVersionFormatted)"
            exit 1
          displayName: Raise error if version doesnt match tag
          condition: and(succeeded(), ne(variables['Build.SourceBranchName'], variables['packageVersionFormatted']))

        - task: DownloadSecureFile@1
          name: PYPIRC_CONFIG
          displayName: 'Download pypirc'
          inputs:
            secureFile: 'pypirc'  

        - script: |
            pip install twine
            twine upload --repository pypi --config-file $(PYPIRC_CONFIG.secureFilePath) dist/* 
          displayName: 'Upload to PyPI'
          condition: and(succeeded(), eq(variables['Build.SourceBranchName'], variables['packageVersionFormatted']))
